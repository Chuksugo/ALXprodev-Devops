#!/bin/bash

output_dir="pokemon_data"
mkdir -p "$output_dir"
error_log="errors_parallel.txt"
> "$error_log"  # clear error log

pokemons=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")
max_parallel=3
timeout=10  # seconds allowed per fetch

declare -A pid_map  # to track pid -> pokemon

fetch_pokemon() {
  local pokemon=$1
  local retries=0
  local max_retries=3
  local success=0

  while (( retries < max_retries )); do
    if curl -s -f "https://pokeapi.co/api/v2/pokemon/$pokemon" -o "$output_dir/$pokemon.json"; then
      echo "Saved data to $output_dir/$pokemon.json ✅"
      success=1
      break
    else
      ((retries++))
      echo "Attempt $retries for $pokemon failed, retrying..."
      sleep 2
    fi
  done

  if [[ $success -eq 0 ]]; then
    echo "Failed to fetch data for $pokemon after $max_retries attempts ❌" >> "$error_log"
  fi
}

start_job() {
  local pokemon=$1
  fetch_pokemon "$pokemon" &
  local pid=$!
  pid_map[$pid]=$pokemon
}

running_jobs=0

for pokemon in "${pokemons[@]}"; do
  start_job "$pokemon"
  ((running_jobs++))

  # Limit parallel jobs
  while (( running_jobs >= max_parallel )); do
    for pid in "${!pid_map[@]}"; do
      if ! kill -0 "$pid" 2>/dev/null; then
        # Process finished
        unset pid_map[$pid]
        ((running_jobs--))
      else
        # Check runtime and kill if over timeout
        runtime=$(ps -p "$pid" -o etimes=)
        if (( runtime > timeout )); then
          echo "Job for ${pid_map[$pid]} (PID $pid) exceeded timeout. Killing..."
          kill -9 "$pid"
          echo "Killed job for ${pid_map[$pid]} due to timeout." >> "$error_log"
          unset pid_map[$pid]
          ((running_jobs--))
        fi
      fi
    done
    sleep 1
  done
done

# Wait for remaining jobs to finish
wait

if [[ -s "$error_log" ]]; then
  echo "Some Pokémon failed or jobs were killed. Check $error_log for details."
else
  echo "All Pokémon data fetched successfully."
fi
